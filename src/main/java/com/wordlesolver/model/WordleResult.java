package com.wordlesolver.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static com.wordlesolver.solver.EntropyCalculator.calculateEntropy;

/**
 * Represents the state of the of a Wordle game at any point
 * Fields:
 * 	    - List<String> remainingWords: The current list of possible words.
 * 	    - Map<String, WordlePattern>: Maps guesses to their resulting patterns.
 * 	    - double remainingEntropy: Tracks the remaining uncertainty.
 * 	Methods:
 * 	    - applyPattern(String guess, WordlePattern pattern): Updates the remaining words based on the new guess.
 */
public class WordleResult {
    private final List<String> remainingWords;
    private final Map<String, String> patterns;
    private double uncertainty;

    /**
     * Constructor to create a WordleResult.
     *
     * @param remainingWords The list of remaining words.
     */
    public WordleResult(List<String> remainingWords) {
        this.remainingWords = new ArrayList<>(remainingWords);
        this.patterns = new HashMap<>();
        uncertainty = calculateBits(this.remainingWords);
    }

    /**
     * Updates the remaining words based on the new guess.
     *
     * @param   guess
     *          The guess word.
     *
     * @param   pattern
     *          The pattern generated by the guess.
     */
    public void applyPattern(String guess, String pattern) {
        patterns.put(guess, pattern);
        remainingWords.removeIf(word -> !pattern.equals(WordlePattern.generatePattern(word, guess)));
        uncertainty = calculateBits(remainingWords);
    }

    /**
     * Calculates the remaining uncertainty.
     *
     * @param   remainingWords
     *          The list of remaining words.
     *
     * @return  The remaining uncertainty.
     */
    private double calculateBits(List<String> remainingWords) {
        return Math.log(remainingWords.size()) / Math.log(2);
    }

    @Override
    public String toString() {
        return "WordleResult{" +
                "remainingWords=" + remainingWords +
                ", patterns=" + patterns +
                ", uncertainty=" + uncertainty +
                '}';
    }

    public double getUncertainty() {
        return uncertainty;
    }

    public List<String> getRemainingWords() {
        return remainingWords;
    }
}
